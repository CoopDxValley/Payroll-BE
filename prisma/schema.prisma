generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               String        @id @default(uuid())
  status           CompanyStatus @default(pending)
  organizationName String
  phoneNumber      String
  companyCode      String
  email            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  notes            String?

  accounts                      Account[]
  positions                     Position[]
  Role                          Role[]
  Grade                         Grade[]
  Shift                         Shift[]
  AdditionalDeductionDefinition AdditionalDeductionDefinition[]
  additionalDeductions          AdditionalDeduction[]
  AdditionalPayDefinition       AdditionalPayDefinition[]
  additionalPays                AdditionalPay[]
  employees                     Employee[]
  departments                   Department[]
  ApprovalWorkflow              ApprovalWorkflow[]

  companyTaxRules          CompanyTaxRule[]
  DeductionDefinition      DeductionDefinition[]
  AllowanceDefinition      AllowanceDefinition[]
  allowances               Allowance[]
  deductions               Deduction[]
  CompanyPensionRule       CompanyPensionRule[]
  CompanyProvidentFundRule CompanyProvidentFundRule[]
}

model Account {
  id            String   @id @default(uuid())
  companyId     String
  accountNumber String
  isMaster      Boolean  @default(false)
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
}

//model Department {
// id                      String     @id @default(uuid())
// deptName                String
// location                String?
// shorthandRepresentation String?
// companyId               String
// isActive                Boolean    @default(true)
// createdAt               DateTime   @default(now())
// updatedAt               DateTime   @updatedAt
// company                 Company    @relation(fields: [companyId], references: [id])
//departmentEmployees     Employee[]

// approvalWorkflow        ApprovalWorkflow[]
//}

model Position {
  id           String   @id @default(uuid())
  positionName String
  description  String?
  companyId    String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company     Company                   @relation(fields: [companyId], references: [id])
  assignments EmployeePositionHistory[]
  //employeePositions Employee[]
}

model EmployeePositionHistory {
  id         String    @id @default(uuid())
  employeeId String
  positionId String
  fromDate   DateTime
  toDate     DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  position Position @relation(fields: [positionId], references: [id])

  @@unique([employeeId, positionId])
}

model Role {
  id        String  @id @default(uuid())
  name      String  @unique
  companyId String
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])

  permissions RolePermission[]
  //employeeRoles EmployeeRole[]
  assignments EmployeeRoleHistory[]
}

model Permission {
  id             String           @id @default(uuid())
  action         String
  subject        String
  action_subject String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Shift {
  id          String   @id @default(uuid())
  name        String
  startTime   DateTime
  endTime     DateTime
  breakTime   Int // Break duration in minutes
  gracePeriod Int // Grace period in minutes
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model Grade {
  id        String   @id @default(uuid())
  name      String
  minSalary Float
  maxSalary Float
  companyId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company     Company                @relation(fields: [companyId], references: [id])
  assignments EmployeeGradeHistory[]
  allowances  Allowance[]
  deductions  Deduction[]

  @@index([companyId])
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum CompanyStatus {
  pending
  active
  reject
  denied
}

enum GENDER {
  MALE
  FEMALE
}

enum PaymentMethod {
  PHONENUMBER
  ACCOUNTNUMBER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REJECTED
}

///////////////

model LeaveType {
  id            String   @id @default(uuid())
  name          String
  description   String?
  maxDaysYearly Int
  isPaid        Boolean  @default(true)
  carryForward  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)

  // Relations (if any - for example, with LeaveRequest model)
  //leaveRequests  LeaveRequest[]
}

model AdditionalDeductionDefinition {
  id        String        @id @default(uuid())
  name      String
  type      DeductionType
  companyId String
  isActive  Boolean       @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company              Company               @relation(fields: [companyId], references: [id])
  additionalDeductions AdditionalDeduction[]
}

model DeductionDefinition {
  id        String  @id @default(uuid())
  name      String
  companyId String
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company    Company     @relation(fields: [companyId], references: [id])
  deductions Deduction[]
}

model AllowanceDefinition {
  id             String   @id @default(uuid())
  name           String
  isTaxable      Boolean  @default(false)
  isExempted     Boolean  @default(false)
  exemptedAmount Decimal  @db.Decimal(10, 2)
  startingAmount Decimal? @db.Decimal(10, 2)
  companyId      String
  isActive       Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company    Company     @relation(fields: [companyId], references: [id])
  allowances Allowance[]
}

model Allowance {
  id                    String @id @default(uuid())
  amount                String
  allowanceDefinitionId String
  gradeId               String
  companyId             String

  allowanceDefinition AllowanceDefinition @relation(fields: [allowanceDefinitionId], references: [id])
  grade               Grade               @relation(fields: [gradeId], references: [id])
  company             Company             @relation(fields: [companyId], references: [id])
}

model Deduction {
  id                    String @id @default(uuid())
  amount                String
  deductionDefinitionId String
  gradeId               String
  companyId             String

  deductionDefinition DeductionDefinition @relation(fields: [deductionDefinitionId], references: [id])
  grade               Grade               @relation(fields: [gradeId], references: [id])
  company             Company             @relation(fields: [companyId], references: [id])
}

model AdditionalPayDefinition {
  id        String      @id @default(uuid())
  name      String
  type      PAYMENTTYPE
  companyId String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  additionalPays AdditionalPay[]
  company        Company         @relation(fields: [companyId], references: [id])

  @@unique([name, companyId, isActive])
}

enum PAYMENTTYPE {
  AMOUNT
  PERCENT
}

enum DeductionType {
  AMOUNT
  PERCENT
}

//////

enum PayrollCalculationType {
  FIXED_SALARY // Fixed monthly/weekly salary regardless of attendance
  HOURLY_ATTENDANCE // Hourly rate based on attendance hours
  MIXED // Base salary + attendance bonuses/deductions
  COMMISSION_BASED // Commission/piece-rate, attendance optional
  CONTRACT // Contract-based, attendance may not matter
}

enum AttendanceRequirement {
  REQUIRED // Must track attendance for payroll
  OPTIONAL // Attendance tracked but doesn't affect pay
  NOT_REQUIRED // No attendance tracking needed
}

model Employee {
  id               String  @id @default(uuid())
  name             String
  username         String  @unique
  phoneNumber      String
  password         String
  employeeIdNumber String? @unique // Device user ID from attendance device

  attendanceRequirement AttendanceRequirement @default(REQUIRED)

  isSuperAdmin        Boolean          @default(false)
  email               String?          @unique
  optionalPhoneNumber String?
  gender              Gender
  dateOfBirth         DateTime?
  nationality         String?          @default("Ethiopia")
  imageUrl            String?
  status              EmploymentStatus @default(ACTIVE)
  idNumber            String?
  idImageUrl          String?
  idType              IdType           @default(KEBELE)

  companyId           String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isFirstTimeLoggedIn Boolean  @default(true)
  Token               Token[]
  company             Company  @relation(fields: [companyId], references: [id])

  gradeHistory      EmployeeGradeHistory[]
  payrollInfo       PayrollInfo?
  terminations      TerminationRecord[]
  departmentHistory EmployeeDepartmentHistory[]
  roleHistory       EmployeeRoleHistory[]
  positionHistory   EmployeePositionHistory[]
  emergencyContacts EmergencyContact[]

  stageEmployees StageEmployee[]
  requests       Request[]
  stageStatuses  StageStatus[]

  delegatedFrom Delegation[] @relation("FromEmployee")
  delegatedTo   Delegation[] @relation("ToEmployee")

  delegatedRuleFrom    DelegationRule[]       @relation("FromEmployeeDelegationRule")
  delegatedRuleTo      DelegationRule[]       @relation("ToEmployeeDelegationRule")
  ApprovalComment      ApprovalComment[]
  ApprovalNotification ApprovalNotification[]
  ApprovalAuditLog     ApprovalAuditLog[]

  additionalDeductions AdditionalDeduction[]
  additionalPays       AdditionalPay[]
}

model AdditionalDeduction {
  id                              String  @id @default(uuid())
  amount                          Decimal @db.Decimal(10, 2)
  employeeId                      String
  additionalDeductionDefinitionId String
  companyId                       String

  employee                      Employee                      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  additionalDeductionDefinition AdditionalDeductionDefinition @relation(fields: [additionalDeductionDefinitionId], references: [id], onDelete: Cascade)
  company                       Company                       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
  @@index([additionalDeductionDefinitionId])
  @@index([companyId])
}

model AdditionalPay {
  id     String  @id @default(uuid())
  amount Decimal @db.Decimal(10, 2)

  additionalPayDefinitionId String
  employeeId                String
  companyId                 String

  additionalPayDefinition AdditionalPayDefinition @relation(fields: [additionalPayDefinitionId], references: [id], onDelete: Cascade)
  employee                Employee                @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company                 Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([additionalPayDefinitionId])
  @@index([employeeId])
  @@index([companyId])
}

model TaxSlab {
  id          String  @id @default(uuid())
  name        String?
  description String?
  type        TaxType @default(INCOME_TAX)
  rate        Float?
  deductible  Float?
  minIncome   Float
  maxIncome   Float
  isDefault   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyTaxRules CompanyTaxRule[]
}

model ProvidentFund {
  id                      String            @id @default(uuid())
  employerContribution    Float
  employeeContribution    Float     
  isDefault               Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyProvidentFundRule CompanyProvidentFundRule[]
}

model Pension {
  id                   String  @id @default(uuid())
  employerContribution Float
  employeeContribution Float
  isDefault            Boolean @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  companyPensionRule CompanyPensionRule[]
}

model CompanyTaxRule {
  id        String  @id @default(uuid())
  companyId String
  taxSlabId String
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  taxSlab TaxSlab @relation(fields: [taxSlabId], references: [id], onDelete: Cascade)

  @@unique([companyId, taxSlabId])
  @@index([companyId])
  @@index([taxSlabId])
}

model CompanyPensionRule {
  id        String  @id @default(uuid())
  companyId String
  pensionId String
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  pension Pension @relation(fields: [pensionId], references: [id], onDelete: Cascade)

  @@unique([companyId, pensionId])
  @@index([companyId])
  @@index([pensionId])
}

model CompanyProvidentFundRule {
  id              String  @id @default(uuid())
  companyId       String
  providentFundId String
  isActive        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  providentFund ProvidentFund @relation(fields: [providentFundId], references: [id], onDelete: Cascade)

  @@unique([companyId, providentFundId])
  @@index([companyId])
  @@index([providentFundId])
}

enum TaxType {
  INCOME_TAX
  EXEMPTION
}

enum ProvidentFundType {
  EMPLOYEE
  EMPLOYER
}

model Department {
  id                      String   @id @default(uuid())
  deptName                String
  parentId                String? // optional for tree structure
  location                String?
  shorthandRepresentation String?
  companyId               String
  //departmentEmployees     Employee[]
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  parent           Department?                 @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[]                @relation("DepartmentHierarchy")
  assignments      EmployeeDepartmentHistory[]
  company          Company                     @relation(fields: [companyId], references: [id])
  approvalWorkflow ApprovalWorkflow[]
}

model EmployeeDepartmentHistory {
  id           String    @id @default(uuid())
  employeeId   String
  departmentId String
  fromDate     DateTime
  toDate       DateTime?

  employee   Employee   @relation(fields: [employeeId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@unique([employeeId, departmentId])
}

model EmployeeGradeHistory {
  employeeId String
  gradeId    String
  fromDate   DateTime
  toDate     DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  grade    Grade    @relation(fields: [gradeId], references: [id])

  @@unique([employeeId, gradeId])
}

enum Gender {
  MALE
  FEMALE
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  RETIRED
}

enum IdType {
  KEBELE
  PASSPORT
  LICENSE
  NATIONALID
}

model PayrollInfo {
  id             String         @id @default(uuid())
  employeeId     String         @unique
  tinNumber      String         @unique
  basicSalary    Float
  currency       String         @default("ETB")
  employmentType EmploymentType
  payFrequency   PayFrequency   @default(MONTHLY)
  accountNumber  String         @unique

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  HOURLY
}

enum PayFrequency {
  MONTHLY
  BIWEEKLY
  WEEKLY
  DAILY
}

model TerminationRecord {
  id              String          @id @default(uuid())
  employeeId      String
  reason          String
  terminationType TerminationType
  noticeDate      DateTime
  terminationDate DateTime
  remarks         String?

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum TerminationType {
  RESIGNATION
  DISMISSAL
  RETIREMENT
  DECEASED
}

model Attendance {
  id           String    @id @default(uuid())
  deviceUserId String // ✅ now the only identifier
  date         DateTime  @db.Date
  checkTime    DateTime
  checkType    CheckType // ✅ enum for punch type
  verifyMode   Int?
  workCode     Int?
  sensorId     String?
  deviceIp     String?
  isAbsent     Boolean   @default(false)
  createdAt    DateTime  @default(now())

  @@index([deviceUserId, date])
}

enum CheckType {
  PUNCHIN
  PUNCHOUT
}

model EmployeeRoleHistory {
  employeeId String
  roleId     String
  fromDate   DateTime
  toDate     DateTime?

  role     Role     @relation(fields: [roleId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@id([employeeId, roleId])
}

model EmergencyContact {
  id           String  @id @default(uuid())
  employeeId   String
  fullName     String
  relationship String
  phone        String
  email        String?
  address      String?

  employee  Employee @relation(fields: [employeeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalStageStatus {
  PENDING
  APPROVED
  REJECTED
  DELEGATED
}

enum RequestType {
  ATTENDANCE
  PAYROLL
  EXPENSE
  PROGRAM
}

model ApprovalWorkflow {
  id              String      @id @default(uuid())
  name            String
  companyId       String
  departmentId    String?
  requestType     RequestType
  isFullyParallel Boolean
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  company    Company            @relation(fields: [companyId], references: [id])
  department Department?        @relation(fields: [departmentId], references: [id])
  stages     ApprovalStage[]
  instances  ApprovalInstance[]

  @@unique([requestType, companyId, departmentId])
}

model ApprovalStage {
  id            String   @id @default(uuid())
  workflowId    String
  isParallel    Boolean
  approvalRules Json
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workflow       ApprovalWorkflow   @relation(fields: [workflowId], references: [id])
  stageEmployees StageEmployee[]
  stageStatuses  StageStatus[]
  instances      ApprovalInstance[] @relation("ActiveStages")
}

model StageEmployee {
  id         String   @id @default(uuid())
  stageId    String
  employeeId String
  weight     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  stage    ApprovalStage @relation(fields: [stageId], references: [id])
  employee Employee      @relation(fields: [employeeId], references: [id])

  @@unique([stageId, employeeId])
}

model Request {
  id          String      @id @default(uuid())
  type        RequestType
  requestedBy String
  moduleId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  requestor Employee           @relation(fields: [requestedBy], references: [id])
  instance  ApprovalInstance[]
}

model ApprovalInstance {
  id                 String         @id @default(uuid())
  requestId          String
  workflowId         String
  activeStageIds     String[]
  status             ApprovalStatus @default(PENDING)
  version            Int            @default(1)
  parentInstanceId   String?
  resubmissionReason String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  request              Request                @relation(fields: [requestId], references: [id])
  workflow             ApprovalWorkflow       @relation(fields: [workflowId], references: [id])
  parentInstance       ApprovalInstance?      @relation("Resubmissions", fields: [parentInstanceId], references: [id])
  resubmissions        ApprovalInstance[]     @relation("Resubmissions")
  activeStages         ApprovalStage[]        @relation("ActiveStages")
  stageStatuses        StageStatus[]
  ApprovalComment      ApprovalComment[]
  ApprovalNotification ApprovalNotification[]
  ApprovalAuditLog     ApprovalAuditLog[]
}

model StageStatus {
  id         String              @id @default(uuid())
  instanceId String
  stageId    String
  approvedBy String?
  status     ApprovalStageStatus
  comments   String?
  approvedAt DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  instance   ApprovalInstance @relation(fields: [instanceId], references: [id])
  stage      ApprovalStage    @relation(fields: [stageId], references: [id])
  approver   Employee?        @relation(fields: [approvedBy], references: [id])
  Delegation Delegation[]

  @@unique([instanceId, stageId, approvedBy])
}

model ApprovalComment {
  id         String           @id @default(uuid())
  instanceId String
  authorId   String
  comment    String
  createdAt  DateTime         @default(now())
  instance   ApprovalInstance @relation(fields: [instanceId], references: [id])
  author     Employee         @relation(fields: [authorId], references: [id])
}

model ApprovalNotification {
  id          String           @id @default(uuid())
  instanceId  String
  recipientId String
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  instance    ApprovalInstance @relation(fields: [instanceId], references: [id])
  recipient   Employee         @relation(fields: [recipientId], references: [id])
}

model ApprovalAuditLog {
  id          String           @id @default(uuid())
  instanceId  String
  action      String
  performedBy String
  details     String?
  createdAt   DateTime         @default(now())
  instance    ApprovalInstance @relation(fields: [instanceId], references: [id])
  performer   Employee         @relation(fields: [performedBy], references: [id])
}

model Delegation {
  id             String      @id @default(uuid())
  stageStatusId  String
  fromEmployeeId String
  toEmployeeId   String
  reason         String?
  createdAt      DateTime    @default(now())
  stageStatus    StageStatus @relation(fields: [stageStatusId], references: [id])
  fromEmployee   Employee    @relation("FromEmployee", fields: [fromEmployeeId], references: [id])
  toEmployee     Employee    @relation("ToEmployee", fields: [toEmployeeId], references: [id])
}

model DelegationRule {
  id             String      @id @default(uuid())
  requestType    RequestType
  fromEmployeeId String // The employee that would normally approve
  toEmployeeId   String // The employee to whom it should be delegated
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  fromEmployee Employee @relation("FromEmployeeDelegationRule", fields: [fromEmployeeId], references: [id])
  toEmployee   Employee @relation("ToEmployeeDelegationRule", fields: [toEmployeeId], references: [id])
}
